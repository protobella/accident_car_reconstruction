<?xml version="1.0" encoding="ISO-8859-15"?>
<launch>
  <arg name="voxel_size" default="0.20" />
  <arg name="voxels_per_side" default="16" />
  <arg name="world_frame" default="base_link" />
  <arg name="dronePointCloudTopic" default="/velodyne_points" />
  
  <node name="voxblox_node" pkg="voxblox_ros" type="tsdf_server" output="screen" args="-alsologtostderr" clear_params="true">
    <remap from="pointcloud" to="$(arg dronePointCloudTopic)"/>
    <remap from="voxblox_node/esdf_map_out" to="esdf_map" />

    <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
    <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
    <param name="publish_esdf_map" value="true" />
    <param name="publish_pointclouds" value="true" />
    <param name="use_tf_transforms" value="true" />
    <param name="update_mesh_every_n_sec" value="1.0" />
    <param name="clear_sphere_for_planning" value="true" />
    <param name="world_frame" value="$(arg world_frame)" />
    <param name="color_mode" value="normals" />

    <param name="mesh_filename" value="$(find voxblox_ros)/mesh_results/accident.ply" />
  </node>

  <node name="voxblox_planner" pkg="voxblox_planner" type="voxblox_planner_node" output="screen" args="-alsologtostderr">
    <remap from="odometry" to="great_estimator/odometry" />
    <remap from="voxblox_node/esdf_map_in" to="esdf_map" />
    <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
    <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
    <param name="update_mesh_every_n_sec" value="0.0" />
    <param name="world_frame" value="$(arg world_frame)" />
  </node>

  <!-- <node pkg="rosservice" type="rosservice" name="mesh_filename" args="call --><!--wait /voxblox_node/generate_mesh" /> -->

</launch>
